//MILAN SINGH 
//This applies a chain of car and cdr to a list, based on a string input (Cons,cdr,car,isList and show are defined in functionalStructures.js)
//i.e. cdddr = cdr(cdr(cdr(list)), cdadr = cdr(car(cdr(list)) etc.
function cxxxr(str) { 
	if (str.length==0){
		return function (list){
			return list;
		};
	}
	
	if (str.charAt(0) == 'd'){
		return function (list){
			return cdr(cxxxr(str.slice(1))(list));
		};
	}
	
	if (str.charAt(0) == 'a'){
		return function (list){
			return car(cxxxr(str.slice(1))(list));
		};
	}
	
}

///////////////////////////////////////////////////////////////////

function helpxxx(tree,s,str,oriTree){

	if (isList(car(tree))){
		var left = helpxxx(car(tree),s,'a'+str,oriTree);
	} else if (car(tree)==s){
		return 'a'+str;
	} 

	if (isList(cdr(tree))){
		var right = helpxxx(cdr(tree),s,'d'+str,oriTree);
	} 
	if (right != null && right !== undefined && right != ""){ //ensures cxxxr is not run on an invalid string
		if (cxxxr(right)(oriTree)==s){ //ensures that the right answer has been reached
			return right;
		}
	}

	if (left != null && left !== undefined && left != ""){ //ensures cxxxr is not run on an invalid string
		if (cxxxr(left)(oriTree)==s){ //ensures that the right answer has been reached
			return left;
		}
	}
}
//This function takes a cons-defined tree and a string to search for and returns a string compatible with cxxxr which defines the car+cdr path to reach that string in the tree 
function makexxx(tree,s){ 
	return helpxxx(tree,s,"",tree);
}

////////////////////////////////////////////////////////////////////

//This function converts the string generated by calling show() on a tree, back into a tree. Show is in functionalStructures.js
function wohs(str){
	if (str.length = 1){return str} // ends when str is sliced into 1 digit
	n = splitter(str.slice(-1,1),0,0,0) //NB: slice(-1,1) cuts the outside brackets otherwise splitter would not work

	return cons(wohs(str.slice(1,n)),wohs(str.slice(n,-1)))
}

function splitter(str,n,open,close){
	
	if (str.charAt(n)=='('){
		//console.log("OPEN")
		return splitter(str,n+1,open+1,close)
	}

	if (str.charAt(n)==')'){
		//console.log("CLOSE")
		return splitter(str,n+1,open,close+1)
	}

	if (str.charAt(n)==' '){
		if (open==close)
			return n
	}
	
	if (str.length > n) {return splitter(str,n+1,open,close)}
	else{ return str.length}

}